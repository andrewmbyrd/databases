module BlocRecord
  class Collection < Array

    #updates is an array
    def update_all(updates)
      ids = self.map(&:id)

      self.any? self.first.class.update(ids, updates) : false
    end

    #we already have all of the elements from the initial where clause in this array: self
    #so just return a random element from self
    def take
      self.sample
    end

    #specification is a hash
    def where(specification)
      #our response is going to be again of type collection. Initially it's empty
      response = Collection.new

      #loop through each element of the response that was generated by the first where clause
      self.each do |entry|
        #any additional match must have the id of the current entry, AND have whatever
        #additional specification was given
        additional_match = entry.class.where(id: self.id, specification)
        #add the match to our response object if it exists. There can only ever be a max of
        # one additional_match per run because we're limiting on id
        response << additional_match unless additional_match.empty?
      end

      response
    end

  end
end
